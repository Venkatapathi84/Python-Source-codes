class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None

    # Insert at the front
    def insert_front(self, data):
        new_node = Node(data)
        new_node.next = self.head
        if self.head is not None:
            self.head.prev = new_node
        self.head = new_node

    # Insert at the end
    def insert_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        curr = self.head
        while curr.next:
            curr = curr.next
        curr.next = new_node
        new_node.prev = curr

    # Delete from front
    def delete_front(self):
        if self.head is None:
            print("List is empty")
            return
        print(f"Deleted: {self.head.data}")
        self.head = self.head.next
        if self.head is not None:
            self.head.prev = None

    # Delete from end
    def delete_end(self):
        if self.head is None:
            print("List is empty")
            return
        curr = self.head
        if curr.next is None:
            print(f"Deleted: {curr.data}")
            self.head = None
            return
        while curr.next:
            curr = curr.next
        print(f"Deleted: {curr.data}")
        curr.prev.next = None

    # Display from front to end
    def display(self):
        curr = self.head
        print("List (forward): ", end="")
        while curr:
            print(curr.data, end=" <-> ")
            last = curr
            curr = curr.next
        print("None")

    # Display from end to front
    def display_reverse(self):
        curr = self.head
        if curr is None:
            print("List is empty")
            return
        # Go to last node
        while curr.next:
            curr = curr.next
        print("List (reverse): ", end="")
        while curr:
            print(curr.data, end=" <-> ")
            curr = curr.prev
        print("None")
